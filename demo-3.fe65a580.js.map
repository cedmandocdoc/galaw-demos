{"version":3,"sources":["../node_modules/agos/dist/agos.umd.js","galaw/utils.js","galaw/engine.js","galaw/clock.js","galaw/controller.js","galaw/throttleRAF.js","galaw/fromEvent.js","galaw/fromMouseMove.js","galaw/fromMouseUp.js","galaw/fromDrag.js","galaw/autoplay.js","galaw/clip.js","galaw/repeat.js","galaw/spring.js","galaw/stagger.js","galaw/timeline.js","galaw/track.js","galaw/tween.js","galaw/easings.js","galaw/index.js","demos/utils.js","demos/demo-3.js"],"names":["noop","clipTime","start","end","next","status","time","forward","currentTime","progress","CLOCK_MODE","Symbol","EMITTER_MODE","Engine","queue","running","tasks","Map","task","set","step","id","delete","window","requestAnimationFrame","forEach","size","clock","PLAY","PAUSE","REVERSE","JUMP","open","fail","done","talkback","offset","current","play","engine","add","pause","listen","type","payload","CANCEL","controller","reverse","jump","value","throttleRAF","release","fromEvent","target","name","options","addEventListener","removeEventListener","fromMouseMove","el","fromMouseUp","fromDrag","initialize","e","x","y","document","clientX","clientY","a","autoplay","source","clip","duration","interceptor","NextInterceptor","control","repeat","loop","lapse","clipInterceptor","dur","ctrl","_next","count","Math","trunc","alternate","_open","spring","computeMotion","settings","mass","stiffness","damping","initialDisplacement","initialVelocity","precision","t","b","m","k","x0","x1","velocity","displacement","z","sqrt","w","abs","pow","B","A","exp","cos","sin","r","r1","r2","computeDuration","log","stagger","delay","clipControls","listenOnClip","index","data","push","max","length","timeline","clips","track","tween","callback","from","to","easeIn","power","easeOut","easeInOut","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","createSpringSettings","container","fields","getElementsByClassName","inputs","map","field","getElementsByTagName","input","firstElementChild","innerHTML","subscribe","sink","external","mapTo","getElementById","page","playground","rotateRange","rotateLabel","querySelector","rectCount","rects","rect","createElement","classList","appendChild","rotate","distribute","l","h","c","i","Infinity","p","rotation","scale","style","transform","innerText"],"mappings":"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","file":"demo-3.fe65a580.js","sourceRoot":"../src","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.agos = {}));\n}(this, (function (exports) { 'use strict';\n\n  class Map {\n    constructor(source, project) {\n      this.source = source;\n      this.project = project;\n    }\n\n    static join(source, project) {\n      return source instanceof Map\n        ? new Map(source.source, value => project(source.project(value)))\n        : new Map(source, project);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.source.listen(\n        open,\n        value => next(this.project(value)),\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const map = project => source => Map.join(source, project);\n\n  const tap = project =>\n    map(value => {\n      project(value);\n      return value;\n    });\n\n  class Filter {\n    constructor(source, predicate) {\n      this.source = source;\n      this.predicate = predicate;\n    }\n\n    static join(source, predicate) {\n      return source instanceof Filter\n        ? new Filter(\n            source.source,\n            value => source.predicate(value) && predicate(value)\n          )\n        : new Filter(source, predicate);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.source.listen(\n        open,\n        value => this.predicate(value) && next(value),\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const filter = predicate => source => Filter.join(source, predicate);\n\n  const CANCEL = Symbol(\"cancel\");\n\n  const noop = () => {};\n\n  const pipe = (...cbs) => {\n    let res = cbs[0];\n    for (let i = 1, n = cbs.length; i < n; i++) res = cbs[i](res);\n    return res;\n  };\n\n  class NextInterceptor {\n    constructor(source) {\n      this.source = source;\n      this.next = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.next = value => next(value);\n      this.source.listen(open, next, fail, done, talkback);\n    }\n  }\n\n  class CancelInterceptor {\n    constructor(source) {\n      this.source = new NextInterceptor(source);\n      this.run = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.run = () => this.source.next([CANCEL]);\n      this.source.listen(open, next, fail, done, talkback);\n    }\n  }\n\n  class TalkbackCancelInterceptor {\n    constructor(source) {\n      this.source = source;\n      this.run = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new CancelInterceptor(talkback);\n      this.run = () => cancel.run();\n      this.source.listen(open, next, fail, done, cancel);\n    }\n  }\n\n  const IDLE = 0;\n  const ACTIVE = 1;\n  const DONE = 2;\n\n  class Source {\n    constructor(producer) {\n      this.producer = producer;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new TalkbackCancelInterceptor(talkback);\n      let state = IDLE;\n      this.producer(\n        () => {\n          if (state === IDLE) {\n            state = ACTIVE;\n            open();\n          }\n        },\n        value => {\n          if (state === ACTIVE) {\n            try {\n              next(value);\n            } catch (error) {\n              fail(error);\n            }\n          }\n        },\n        error => {\n          if (state === ACTIVE) fail(error);\n        },\n        cancelled => {\n          if (state === ACTIVE) {\n            cancel.run();\n            done(cancelled);\n            state = DONE;\n          }\n        },\n        filter(() => state === ACTIVE)(cancel)\n      );\n    }\n  }\n\n  const create = producer => new Source(producer);\n\n  const never = () => create(noop);\n\n  class Chain {\n    constructor(source, projects) {\n      this.source = source;\n      this.projects = projects;\n    }\n\n    static join(source, projects) {\n      return source instanceof Chain\n        ? new Chain(source.source, [...source.projects, ...projects])\n        : new Chain(source, projects);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancels = [];\n      let cancelled = false;\n      let active = 0;\n\n      const run = index => value => {\n        const project = this.projects[index];\n        const source = project(value);\n        const cancel = new CancelInterceptor(never());\n        cancels.push(cancel);\n\n        source.listen(\n          () => active++,\n          index >= this.projects.length - 1 ? next : run(index + 1),\n          fail,\n          () => --active <= 0 && done(cancelled),\n          cancel\n        );\n      };\n\n      this.source.listen(\n        open,\n        this.projects.length === 0 ? next : run(0),\n        fail,\n        () => active <= 0 && done(cancelled),\n        tap(payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n          }\n        })(talkback)\n      );\n    }\n  }\n\n  const chain = (...projects) => source => Chain.join(source, projects);\n\n  const IDLE$1 = 0;\n  const ACTIVE$1 = 1;\n  const DONE$1 = 2;\n\n  const emitter = () => {\n    let state = IDLE$1;\n    const opens = new Set();\n    const nexts = new Set();\n    const fails = new Set();\n    const dones = new Set();\n\n    const open = () => {\n      if (state === IDLE$1) {\n        state = ACTIVE$1;\n        for (const open of opens.values()) open();\n        opens.clear();\n      }\n    };\n\n    const next = value => {\n      if (state === ACTIVE$1) for (const next of nexts.values()) next(value);\n    };\n\n    const fail = error => {\n      if (state === ACTIVE$1) for (const fail of fails.values()) fail(error);\n    };\n\n    const done = cancelled => {\n      if (state === ACTIVE$1) {\n        state = DONE$1;\n        for (const done of dones.values()) done(cancelled);\n        nexts.clear();\n        fails.clear();\n        dones.clear();\n      }\n    };\n\n    const source = create((open, next, fail, done, talkback) => {\n      if (state === IDLE$1) opens.add(open);\n      else if (state === ACTIVE$1) open();\n\n      nexts.add(next);\n      fails.add(fail);\n      dones.add(done);\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            nexts.delete(next);\n            fails.delete(fail);\n            dones.delete(done);\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n    });\n\n    return [\n      {\n        open,\n        next,\n        fail,\n        done\n      },\n      source\n    ];\n  };\n\n  class Collect {\n    constructor(source, pipes) {\n      this.source = source;\n      this.pipes = pipes;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      // TO DO investigate if emitter\n      // is appropriate to use in collection\n      const [controller, subject] = emitter();\n      const cancel = new CancelInterceptor(talkback);\n      let cancelled = 0;\n      let active = false;\n      for (let index = 0; index < this.pipes.length; index++) {\n        const pipe = this.pipes[index](subject);\n        pipe.listen(\n          noop,\n          value => next([value, index]),\n          error => fail([error, index]),\n          () => {\n            if (active && ++cancelled >= this.pipes.length) cancel.run();\n          },\n          never()\n        );\n      }\n      this.source.listen(\n        () => {\n          active = true;\n          open();\n          controller.open();\n        },\n        controller.next,\n        controller.fail,\n        cancelled => {\n          active = false;\n          done(cancelled);\n          controller.done(cancelled);\n        },\n        cancel\n      );\n    }\n  }\n\n  const collect = pipes => source => new Collect(source, pipes);\n\n  class Scan {\n    constructor(source, accumulator, seed) {\n      this.source = source;\n      this.accumulator = accumulator;\n      this.seed = seed;\n    }\n\n    static join(source, accumulator, seed) {\n      return new Scan(source, accumulator, seed);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      let seed = this.seed;\n      this.source.listen(\n        open,\n        value => {\n          seed = this.accumulator(seed, value);\n          next(seed);\n        },\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const scan = (accumulator, seed) => source =>\n    Scan.join(source, accumulator, seed);\n\n  const collectLatest = pipes => source =>\n    filter(values => values.length >= pipes.length)(\n      scan((values, [value, index]) => {\n        const newValues = [...values];\n        newValues[index] = value;\n        return newValues;\n      }, [])(collect(pipes)(source))\n    );\n\n  const concat = sources =>\n    create((open, next, fail, done, talkback) => {\n      const cancel = new CancelInterceptor(never());\n\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancel.run();\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n\n      const run = index => {\n        const source = sources[index];\n        source.listen(\n          index === 0 ? open : noop,\n          next,\n          fail,\n          () => {\n            if (index >= sources.length - 1) return done(false);\n            run(index + 1);\n          },\n          cancel\n        );\n      };\n\n      run(0);\n    });\n\n  const empty = () =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      done(false);\n    });\n\n  const fromArray = array =>\n    create((open, next, fail, done, talkback) => {\n      let cancelled = false;\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      open();\n      for (let index = 0; index < array.length; index++) {\n        if (cancelled) break;\n        next([array[index], index]);\n      }\n      done(false);\n    });\n\n  const fromObject = object =>\n    create((open, next, fail, done, talkback) => {\n      let cancelled = false;\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      open();\n      const keys = Object.keys(object);\n      for (let index = 0; index < keys.length; index++) {\n        if (cancelled) break;\n        const key = keys[index];\n        const value = object[key];\n        next([value, key]);\n      }\n      done(false);\n    });\n\n  const fromPromise = promise =>\n    create((open, next, fail, done, talkback) => {\n      open();\n      promise\n        .then(value => next(value))\n        .catch(error => fail(error))\n        .finally(() => done(false));\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n    });\n\n  const join = () => chain(source => source);\n\n  class Slice {\n    constructor(source, start = 0, end = Infinity) {\n      this.source = source;\n      this.start = start;\n      this.end = end;\n    }\n\n    static join(source, start = 0, end = Infinity) {\n      return source instanceof Slice\n        ? new Slice(\n            source.source,\n            start < 0 ? start : source.start + start,\n            end < source.end ? end : source.end\n          )\n        : new Slice(source, start, end);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      if (this.start < 0 || this.end < 0) {\n        // future sink\n        const values = [];\n\n        this.source.listen(\n          open,\n          value => values.push(value),\n          fail,\n          cancelled => {\n            const sliced = values.slice(this.start, this.end);\n            for (let index = 0; index < sliced.length; index++) {\n              next(sliced[index]);\n            }\n            done(cancelled);\n          },\n          talkback\n        );\n      } else {\n        // slice sink\n        let count = 0;\n        const cancel = new CancelInterceptor(talkback);\n\n        this.source.listen(\n          open,\n          value => {\n            count++;\n            count > this.start && next(value);\n            count >= this.end && cancel.run();\n          },\n          fail,\n          done,\n          cancel\n        );\n      }\n    }\n  }\n\n  const slice = (start, end) => source => Slice.join(source, start, end);\n\n  const last = () => slice(-1);\n\n  const listen = (\n    open = noop,\n    next = noop,\n    fail = noop,\n    done = noop,\n    talkback = never()\n  ) => source => source.listen(open, next, fail, done, talkback);\n\n  const merge = sources =>\n    create((open, next, fail, done, talkback) => {\n      const closed = [];\n      const cancels = [];\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      for (let index = 0; index < sources.length; index++) {\n        const source = sources[index];\n        const cancel = new CancelInterceptor(never());\n        cancels[index] = cancel;\n        source.listen(\n          open,\n          value => next([value, index]),\n          error => fail([error, index]),\n          () => {\n            closed[index] = true;\n            if (closed.length === sources.length) done(false);\n          },\n          cancel\n        );\n      }\n    });\n\n  const mergeLatest = sources =>\n    pipe(\n      merge(sources),\n      scan((values, [value, index]) => {\n        values[index] = value;\n        return values;\n      }, []),\n      filter(values => values.length >= sources.length)\n    );\n\n  const multicast = source => {\n    let active = false;\n    const [controller, subject] = emitter();\n\n    return create((open, next, fail, done, talkback) => {\n      subject.listen(open, next, fail, done, talkback);\n      if (!active) {\n        active = true;\n        source.listen(\n          controller.open,\n          controller.next,\n          controller.fail,\n          controller.done,\n          never()\n        );\n      }\n    });\n  };\n\n  const of = value =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      next(value);\n      done(false);\n    });\n\n  const fail = error =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      fail(error);\n      done(false);\n    });\n\n  const skip = amount => slice(amount);\n\n  const skipWhile = predicate => filter(value => !predicate(value));\n\n  class SwitchMap {\n    constructor(source, projects) {\n      this.source = source;\n      this.projects = projects;\n    }\n\n    static join(source, projects) {\n      return source instanceof SwitchMap\n        ? new SwitchMap(source.source, [...source.projects, ...projects])\n        : new SwitchMap(source, projects);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancels = [];\n      let cancelled = false;\n      let finished = false;\n      let active = 0;\n\n      const run = index => value => {\n        cancels[index] = cancels[index] || new CancelInterceptor(never());\n        const cancel = cancels[index];\n        cancel.run();\n        const project = this.projects[index];\n        const source = project(value);\n\n        source.listen(\n          () => active++,\n          index >= this.projects.length - 1 ? next : run(index + 1),\n          fail,\n          () => --active <= 0 && finished && done(cancelled),\n          cancel\n        );\n      };\n\n      this.source.listen(\n        open,\n        this.projects.length === 0 ? next : run(0),\n        fail,\n        cancel => {\n          finished = true;\n          cancelled = cancel;\n          if (active <= 0) done(cancelled);\n        },\n        tap(payload => {\n          if (payload[0] === CANCEL) {\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n          }\n        })(talkback)\n      );\n    }\n  }\n\n  const switchMap = project => source => SwitchMap.join(source, [project]);\n\n  const take = amount => slice(0, amount);\n\n  class TakeWhile {\n    constructor(source, predicate) {\n      this.source = source;\n      this.predicate = predicate;\n    }\n\n    static join(source, predicate) {\n      return source instanceof TakeWhile\n        ? new TakeWhile(source.source, value => {\n            const [included, inclusive] = source.predicate(value);\n            if (!included) return [included, inclusive];\n            return predicate(value);\n          })\n        : new TakeWhile(source, predicate);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new CancelInterceptor(talkback);\n\n      this.source.listen(\n        open,\n        value => {\n          const [included, inclusive] = this.predicate(value);\n          if (!included) {\n            if (inclusive) next(value);\n            return cancel.run();\n          }\n          next(value);\n        },\n        fail,\n        done,\n        cancel\n      );\n    }\n  }\n\n  const takeWhile = (predicate, inclusive = false) => source =>\n    TakeWhile.join(source, value => [predicate(value), inclusive]);\n\n  class Throttle {\n    constructor(source, tick) {\n      this.source = source;\n      this.tick = tick;\n    }\n\n    static join(source, tick) {\n      return source instanceof Throttle\n        ? new Throttle(source.source, (release, data) =>\n            source.tick(() => tick(release, data), data)\n          )\n        : new Throttle(source, tick);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      let active = false;\n      this.source.listen(\n        open,\n        value => {\n          if (active) return;\n          active = true;\n          this.tick(() => {\n            next(value);\n            active = false;\n          }, value);\n        },\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const throttle = tick => source => Throttle.join(source, tick);\n\n  exports.CANCEL = CANCEL;\n  exports.CancelInterceptor = CancelInterceptor;\n  exports.NextInterceptor = NextInterceptor;\n  exports.TalkbackCancelInterceptor = TalkbackCancelInterceptor;\n  exports.chain = chain;\n  exports.collect = collect;\n  exports.collectLatest = collectLatest;\n  exports.concat = concat;\n  exports.create = create;\n  exports.emitter = emitter;\n  exports.empty = empty;\n  exports.filter = filter;\n  exports.fromArray = fromArray;\n  exports.fromObject = fromObject;\n  exports.fromPromise = fromPromise;\n  exports.join = join;\n  exports.last = last;\n  exports.listen = listen;\n  exports.map = map;\n  exports.merge = merge;\n  exports.mergeLatest = mergeLatest;\n  exports.multicast = multicast;\n  exports.never = never;\n  exports.of = of;\n  exports.pipe = pipe;\n  exports.reject = fail;\n  exports.scan = scan;\n  exports.skip = skip;\n  exports.skipWhile = skipWhile;\n  exports.slice = slice;\n  exports.switchMap = switchMap;\n  exports.take = take;\n  exports.takeWhile = takeWhile;\n  exports.tap = tap;\n  exports.throttle = throttle;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","export const noop = () => { };\n\nexport const clipTime = (start, end, next) => {\n  const status = [0, 0];\n  return ({ time, forward }) => {\n    if (time >= start && time <= end) {\n      const currentTime = time - start;\n      next({\n        time: currentTime,\n        forward,\n        progress: currentTime / (end - start)\n      });\n      status[0] = 0;\n      status[1] = 0;\n    } else if (time < start && !status[0] && !forward) {\n      next({ time: start, forward, progress: 0 });\n      status[0] = 1;\n      status[1] = 0;\n    } else if (time > end && !status[1] && forward) {\n      next({ time: end, forward, progress: 1 });\n      status[0] = 0;\n      status[1] = 1;\n    }\n  };\n};\n\nexport const CLOCK_MODE = Symbol(\"CLOCK_MODE\");\nexport const EMITTER_MODE = Symbol(\"EMITTER_MODE\");\n","class Engine {\n  constructor() {\n    this.queue = 1;\n    this.running = false;\n    this.tasks = new Map();\n  }\n\n  add(task) {\n    this.tasks.set(this.queue, task);\n\n    if (!this.running) {\n      this.running = true;\n      this.step();\n    }\n\n    return this.queue++;\n  }\n\n  delete(id) {\n    this.tasks.delete(id);\n  }\n\n  step() {\n    window.requestAnimationFrame(time => {\n      this.tasks.forEach(task => task(time));\n      if (this.tasks.size) this.step();\n      else this.running = false;\n    });\n  }\n}\n\nexport default new Engine();\n","import { create, never, CANCEL } from \"agos\";\nimport { noop } from \"./utils\";\n\nimport engine from \"./engine\";\n\nexport const PLAY = Symbol(\"play\");\nexport const PAUSE = Symbol(\"pause\");\nexport const REVERSE = Symbol(\"reverse\");\nexport const JUMP = Symbol(\"jump\");\n\nconst clock = create((open, next, fail, done, talkback) => {\n  let id = 0;\n  let start = 0;\n  let offset = 0;\n  let current = 0;\n  let forward = true;\n\n  const play = () => {\n    if (id) return;\n    start = 0;\n    id = engine.add(time => {\n      start = start || time;\n      current = forward ? time - start + offset : offset - (time - start);\n      next({ time: current, forward });\n    });\n  };\n\n  const pause = () => {\n    if (!id) return;\n    engine.delete(id);\n    id = 0;\n    start = 0;\n    offset = current;\n  };\n\n  const reverse = () => {\n    start = 0;\n    offset = current;\n    forward = !forward;\n    play();\n  };\n\n  const jump = time => {\n    start = 0;\n    current = time;\n    offset = time;\n    if (!id) {\n      id = engine.add(time => {\n        start = start || time;\n        current = forward ? time - start + offset : offset - (time - start);\n        next({ time: current, forward });\n        engine.delete(id);\n        id = 0;\n      });\n    }\n  };\n\n  const cancel = () => {\n    pause();\n    done(true);\n  };\n\n  open();\n\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === PLAY) play();\n      else if (type === PAUSE) pause();\n      else if (type === REVERSE) reverse();\n      else if (type === JUMP) jump(payload);\n      else if (type === CANCEL) cancel();\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default clock;\n","import { merge, map, of, never, pipe } from \"agos\";\nimport { CLOCK_MODE } from \"./utils\";\nimport { PLAY, REVERSE, PAUSE, JUMP } from \"./clock\";\n\nconst controller = ({\n  play = never(),\n  pause = never(),\n  reverse = never(),\n  jump = never()\n} = {}) => pipe(\n  merge([\n    of([CLOCK_MODE]),\n    pipe(\n      play,\n      map(() => [PLAY])\n    ),\n    pipe(\n      pause,\n      map(() => [PAUSE])\n    ),\n    pipe(\n      reverse,\n      map(() => [REVERSE])\n    ),\n    pipe(\n      jump,\n      map(time => [JUMP, time])\n    )\n  ]),\n  map(([value]) => value)\n);\n\nexport default controller;\n","import { throttle } from \"agos\";\nimport engine from \"./engine\";\n\nconst throttleRAF = throttle(release => {\n  const id = engine.add(() => {\n    release();\n    engine.delete(id);\n  });\n});\n\nexport default throttleRAF;\n","import { create, CANCEL, never } from \"agos\";\nimport { noop } from \"./utils\";\n\nconst fromEvent = (target, name, options) =>\n  create((open, next, fail, done, talkback) => {\n    open();\n    target.addEventListener(name, next, options);\n    talkback.listen(\n      noop,\n      payload => {\n        if (payload[0] === CANCEL) {\n          target.removeEventListener(name, next);\n          done(true);\n        }\n      },\n      noop,\n      noop,\n      never()\n    );\n  });\n\nexport default fromEvent;\n","import { pipe, map } from \"agos\";\nimport fromEvent from \"./fromEvent\";\nimport throttleRAF from \"./throttleRAF\";\n\nconst fromMouseMove = (el, options) =>\n  pipe(\n    fromEvent(el, \"mousemove\", options),\n    throttleRAF,\n    // to do what should respect here layer screen or change\n    // the settings for initial reference\n    // map(e => ({ x: e.layerX - x, y: e.layerY - y }))\n  );\n\nexport default fromMouseMove;","import { pipe, map } from \"agos\";\nimport fromEvent from \"./fromEvent\";\nimport throttleRAF from \"./throttleRAF\";\n\nconst fromMouseUp = el =>\n  pipe(\n    fromEvent(el, \"mouseup\"),\n    throttleRAF,\n    // map(e => ({ x: e.clientX - x, y: e.clientY - y }))\n  );\n\nexport default fromMouseUp;","import { pipe, create, map, switchMap, takeWhile, merge, listen } from \"agos\";\nimport { noop } from \"./utils\";\nimport throttleRAF from \"./throttleRAF\";\nimport fromEvent from \"./fromEvent\";\nimport fromMouseMove from \"./fromMouseMove\";\nimport fromMouseUp from \"./fromMouseUp\";\n\n// revive-able? identify source listener when not use\n\nconst fromDrag = el =>\n  create((open, next, fail, done, talkback) => {\n    const initialize = () => {\n      pipe(\n        fromEvent(el, \"mousedown\"),\n        throttleRAF,\n        switchMap(e => {\n          const { x, y } = e;\n          next([\"hold\"], { x: 0, y: 0 });\n          return merge([\n            pipe(\n              fromMouseMove(document),\n              map(e => ({ x: e.clientX - x, y: e.clientY - y })),\n              map(e => [\"drag\", e])\n            ),\n            pipe(\n              fromMouseUp(document),\n              map(e => ({ x: e.clientX - x, y: e.clientY - y })),\n              map(e => [\"release\", e])\n            )\n          ]);\n        }),\n        takeWhile(([[name]]) => name === \"drag\", true),\n        map(a => a[0]),\n        listen(noop, next, fail, () => initialize(), talkback)\n      );\n    };\n\n    open();\n    initialize();\n  });\n\nexport default fromDrag;\n","import { pipe, create, merge, of, map, tap } from \"agos\";\nimport { CLOCK_MODE } from \"./utils\";\nimport { PLAY } from \"./clock\";\n\nconst autoplay = source =>\n  create((open, next, fail, done, talkback) => {\n    source.listen(\n      open,\n      next,\n      fail,\n      done,\n      pipe(\n        merge([of([CLOCK_MODE]), of([PLAY]), talkback]),\n        map(([value]) => value)\n      )\n    );\n  });\n\nexport default autoplay;","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop, clipTime } from \"./utils\";\nimport clock from \"./clock\";\n\nconst clip = duration => create((open, next, fail, done, talkback) => {\n  const interceptor = new NextInterceptor(never());\n  open();\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === CLOCK_MODE) {\n        interceptor.next([CANCEL]);\n        clock.listen(\n          open,\n          clipTime(0, duration, next),\n          fail,\n          done,\n          interceptor\n        );\n        return;\n      }\n      if (type === EMITTER_MODE) {\n        interceptor.next([CANCEL]);\n        const [control, source] = emitter();\n        source.listen(open, next, fail, done, interceptor);\n        payload(duration, control);\n        return;\n      }\n      interceptor.next([type, payload]);\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default clip;\n","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop, clipTime } from \"./utils\";\nimport clock from \"./clock\";\n\nconst repeat = (clip, loop) => create((open, next, fail, done, talkback) => {\n  let duration = 0;\n  let control = null;\n  let lapse = 0;\n  const clipInterceptor = new NextInterceptor(never());\n  clip.listen(noop, next, fail, noop, clipInterceptor);\n  clipInterceptor.next([\n    EMITTER_MODE,\n    (dur, ctrl) => {\n      duration = dur * loop;\n      lapse = dur;\n      control = ctrl;\n    }\n  ]);\n\n  const _next = ({ time, forward }) => {\n    const count = Math.trunc(time / lapse);\n    if (count >= loop) return;\n    if (time >= 0 && time <= duration) {\n      const current = time - lapse * count;\n\n      control.next({ time: current, forward, progress: current / lapse, alternate: count % 2 === 0 ? current / lapse : 1 - (current / lapse) });\n    }\n  };\n\n  const _open = () => control.open();\n\n  const interceptor = new NextInterceptor(never());\n  open();\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === CLOCK_MODE) {\n        interceptor.next([CANCEL]);\n        clock.listen(\n          _open,\n          clipTime(0, duration, _next),\n          fail,\n          done,\n          interceptor\n        );\n        return;\n      }\n      if (type === EMITTER_MODE) {\n        interceptor.next([CANCEL]);\n        const [control, source] = emitter();\n        source.listen(_open, _next, fail, done, interceptor);\n        payload(duration, control);\n        return;\n      }\n      interceptor.next([type, payload]);\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default repeat;","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop } from \"./utils\";\nimport clock from \"./clock\";\n\nconst computeMotion = (settings, time) => {\n  const {\n    mass,\n    stiffness,\n    damping,\n    initialDisplacement,\n    initialVelocity,\n    precision = 0.01\n  } = settings;\n\n  const t = time / 1000;\n  const b = damping;\n  const m = mass;\n  const k = stiffness;\n  const x0 = initialDisplacement;\n  const x1 = initialVelocity;\n\n  let velocity = 0;\n  let displacement = 0;\n\n  const z = b / Math.sqrt(4 * k * m);\n  if (z < 1) {\n    // underdamped\n    const w = Math.sqrt(Math.abs(Math.pow(b / m, 2) - (4 * k) / m));\n    const B = -(x1 + (x0 * b) / (2 * m)) / w;\n    const A = x0;\n    displacement =\n      Math.exp((-b * t) / (2 * m)) *\n      (A * Math.cos(w * t) + B * Math.sin(w * t));\n    velocity =\n      (A * Math.cos(w * t) + B * Math.sin(w * t)) *\n      (-1 * (b / (2 * m))) *\n      Math.exp((-1 * b * t) / (2 * m)) +\n      (A * w * Math.sin(w * t) + B * w * Math.cos(w * t)) *\n      Math.exp((-1 * b * t) / (2 * m));\n  } else if (z === 1) {\n    // critically damped\n    const r = -(b / (2 * m));\n    const B = x1 - x0 * r;\n    const A = x0;\n    displacement = A * Math.exp(r * t) + B * t * Math.exp(r * t);\n    velocity =\n      A * r * Math.exp(r * t) + B * (Math.exp(r * t) + t * Math.exp(r * t));\n  } else if (z > 1) {\n    // overdamped\n    const w = Math.sqrt(Math.abs(Math.pow(b / m, 2) - (4 * k) / m));\n    const r1 = 0.5 * (-b / m + w);\n    const r2 = 0.5 * (-b / m - w);\n    const B = (x1 - r1 * x0) / (r2 - r1);\n    const A = x0 - B;\n    displacement = A * Math.exp(r1 * t) + B * Math.exp(r2 * t);\n    velocity = A * r1 * Math.exp(r1 * t) + B * r2 * Math.exp(r2 * t);\n  }\n\n  if (Math.abs(velocity) <= precision || Math.abs(displacement) <= precision) {\n    displacement = 0;\n    velocity = 0;\n  }\n\n  return {\n    displacement,\n    velocity\n  };\n};\n\nconst computeDuration = settings => {\n  const {\n    mass,\n    stiffness,\n    damping,\n    initialDisplacement,\n    precision = 0.5\n  } = settings;\n\n  const b = damping;\n  const m = mass;\n  const k = stiffness;\n  const x0 = initialDisplacement;\n\n  const z = b / Math.sqrt(4 * k * m);\n\n  if (z < 1) {\n    return ((-2 * m * Math.log(precision / x0)) / b) * 1000;\n  }\n\n  let time = 0;\n  while (true) {\n    time += 100 / 6;\n    const { displacement, velocity } = computeMotion(settings, time);\n    if (displacement === 0 && velocity === 0) break;\n  }\n  return time;\n};\n\n// TO DO: spring\n// should propagate done on finish?\n// should depend on motion when to propagate or stop?\nconst spring = settings =>\n  create((open, next, fail, done, talkback) => {\n    const interceptor = new NextInterceptor(never());\n    const status = [0, 0];\n    open();\n\n    const _next = ({ time, forward }) => {\n      const { displacement, velocity } = computeMotion(settings, time);\n      if (time >= 0 && displacement !== 0 && velocity !== 0) {\n        status[0] = 0;\n        status[1] = 0;\n        const progress =\n          Math.abs(\n            (time < 0 ? settings.initialDisplacement : displacement) -\n            settings.initialDisplacement\n          ) / settings.initialDisplacement;\n        next({ time, forward, displacement, velocity, progress });\n      } else if (!forward && !status[0] && time < 0) {\n        status[0] = 1;\n        status[1] = 0;\n        next({ time, forward, displacement, velocity, progress: 0 });\n      } else if (\n        forward &&\n        !status[1] &&\n        displacement === 0 &&\n        velocity === 0\n      ) {\n        status[0] = 0;\n        status[1] = 1;\n        next({ time, forward, displacement, velocity, progress: 1 });\n      }\n    };\n    talkback.listen(\n      noop,\n      ([type, payload]) => {\n        if (type === CLOCK_MODE) {\n          interceptor.next([CANCEL]);\n          clock.listen(open, _next, fail, done, interceptor);\n          return;\n        }\n        if (type === EMITTER_MODE) {\n          interceptor.next([CANCEL]);\n          const [control, source] = emitter();\n          source.listen(open, _next, fail, done, interceptor);\n          payload(computeDuration(settings), control);\n          return;\n        }\n        interceptor.next([type, payload]);\n      },\n      noop,\n      noop,\n      never()\n    );\n  });\n\nexport default spring;\n","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop, clipTime } from \"./utils\";\nimport clock from \"./clock\";\n\nconst stagger = (clip, { count, delay }) =>\n  create((open, next, fail, done, talkback) => {\n    const clipControls = [];\n\n    let duration = 0;\n\n    const listenOnClip = index => {\n      if (index >= count) return;\n      const interceptor = new NextInterceptor(never());\n      clip(index, count).listen(noop, data => next([data, index]), fail, noop, interceptor);\n      interceptor.next([\n        EMITTER_MODE,\n        (dur, control) => {\n          const start = delay(index, count);\n          const end = start + dur;\n          duration = end;\n          clipControls.push({\n            ...control,\n            next: clipTime(start, end, data => control.next(data))\n          });\n          duration = Math.max(duration, dur);\n          listenOnClip(index + 1);\n        }\n      ]);\n    };\n\n    listenOnClip(0);\n\n    const _next = ({ time, forward }) => {\n      for (let index = 0; index < clipControls.length; index++) {\n        const control = clipControls[index];\n        control.next({ time, forward });\n      }\n    };\n\n    const _open = () => {\n      for (let index = 0; index < clipControls.length; index++) {\n        const control = clipControls[index];\n        control.open();\n      }\n    };\n\n    open();\n    const interceptor = new NextInterceptor(never());\n    talkback.listen(\n      noop,\n      ([type, payload]) => {\n        if (type === CLOCK_MODE) {\n          interceptor.next([CANCEL]);\n          clock.listen(\n            _open,\n            clipTime(0, duration, _next),\n            fail,\n            done,\n            interceptor\n          );\n          return;\n        }\n        if (type === EMITTER_MODE) {\n          interceptor.next([CANCEL]);\n          const [control, source] = emitter();\n          source.listen(_open, _next, fail, done, interceptor);\n          payload(duration, control);\n          return;\n        }\n        interceptor.next([type, payload]);\n      },\n      noop,\n      noop,\n      never()\n    );\n  });\n\nexport default stagger;\n","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop, clipTime } from \"./utils\";\nimport clock from \"./clock\";\n\nconst timeline = (...clips) => create((open, next, fail, done, talkback) => {\n  const clipControls = [];\n\n  let duration = 0;\n\n  for (let index = 0; index < clips.length; index++) {\n    const interceptor = new NextInterceptor(never());\n    const clip = clips[index];\n    clip.listen(noop, next, fail, noop, interceptor);\n    interceptor.next([\n      EMITTER_MODE,\n      (dur, control) => {\n        clipControls[index] = {\n          ...control,\n          next: clipTime(0, dur, control.next)\n        };\n        duration = Math.max(duration, dur);\n      }\n    ]);\n  }\n\n  const _next = ({ time, forward }) => {\n    for (let index = 0; index < clipControls.length; index++) {\n      const control = clipControls[index];\n      control.next({ time, forward });\n    }\n  };\n\n  const _open = () => {\n    for (let index = 0; index < clipControls.length; index++) {\n      const control = clipControls[index];\n      control.open();\n    }\n  };\n\n  open();\n  const interceptor = new NextInterceptor(never());\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === CLOCK_MODE) {\n        interceptor.next([CANCEL]);\n        clock.listen(\n          _open,\n          clipTime(0, duration, _next),\n          fail,\n          done,\n          interceptor\n        );\n        return;\n      }\n      if (type === EMITTER_MODE) {\n        interceptor.next([CANCEL]);\n        const [control, source] = emitter();\n        source.listen(_open, _next, fail, done, interceptor);\n        payload(duration, control);\n        return;\n      }\n      interceptor.next([type, payload]);\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default timeline;\n","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop, clipTime } from \"./utils\";\nimport clock from \"./clock\";\n\nconst track = (...clips) => create((open, next, fail, done, talkback) => {\n  const clipControls = [];\n\n  let duration = 0;\n\n  for (let index = 0; index < clips.length; index++) {\n    const interceptor = new NextInterceptor(never());\n    const clip = clips[index];\n    if (typeof clip === \"number\") {\n      duration += clip;\n    } else {\n      clip.listen(noop, next, fail, noop, interceptor);\n      interceptor.next([\n        EMITTER_MODE,\n        (dur, control) => {\n          clipControls[index] = {\n            ...control,\n            next: clipTime(duration, duration + dur, control.next)\n          };\n          duration += dur;\n        }\n      ]);\n    }\n  }\n\n  const _next = ({ time, forward }) => {\n    for (let index = 0; index < clipControls.length; index++) {\n      const control = clipControls[index];\n      control.next({ time, forward });\n    }\n  };\n\n  const _open = () => {\n    for (let index = 0; index < clipControls.length; index++) {\n      const control = clipControls[index];\n      control.open();\n    }\n  };\n\n  open();\n  const interceptor = new NextInterceptor(never());\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === CLOCK_MODE) {\n        interceptor.next([CANCEL]);\n        clock.listen(\n          _open,\n          clipTime(0, duration, _next),\n          fail,\n          done,\n          interceptor\n        );\n        return;\n      }\n      if (type === EMITTER_MODE) {\n        interceptor.next([CANCEL]);\n        const [control, source] = emitter();\n        source.listen(_open, _next, fail, done, interceptor);\n        payload(duration, control);\n        return;\n      }\n      interceptor.next([type, payload]);\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default track;\n","import { map } from \"agos\";\n\nconst tween = callback =>\n  map(progress => callback((from, to) => (to - from) * progress + from));\n\nexport default tween;\n","const easeIn = power => t => Math.pow(t, power);\n\nconst easeOut = power => t => 1 - Math.abs(Math.pow(t - 1, power));\n\nconst easeInOut = power => t =>\n  t < 0.5 ? easeIn(power)(t * 2) / 2 : easeOut(power)(t * 2 - 1) / 2 + 0.5;\n\nexport const linear = easeInOut(1);\nexport const easeInQuad = easeIn(2);\nexport const easeOutQuad = easeOut(2);\nexport const easeInOutQuad = easeInOut(2);\nexport const easeInCubic = easeIn(3);\nexport const easeOutCubic = easeOut(3);\nexport const easeInOutCubic = easeInOut(3);\nexport const easeInQuart = easeIn(4);\nexport const easeOutQuart = easeOut(4);\nexport const easeInOutQuart = easeInOut(4);\nexport const easeInQuint = easeIn(5);\nexport const easeOutQuint = easeOut(5);\nexport const easeInOutQuint = easeInOut(5);\n","\nimport controller from './controller';\n\n// events\nimport fromDrag from './fromDrag';\nimport fromEvent from './fromEvent';\nimport fromMouseMove from './fromMouseMove';\nimport fromMouseUp from './fromMouseUp';\n\n// animations\nimport autoplay from './autoplay';\nimport clip from './clip';\nimport repeat from './repeat';\nimport spring from './spring';\nimport stagger from './stagger';\nimport timeline from './timeline';\nimport track from './track';\n\n// pipes\nimport throttleRAF from './throttleRAF';\nimport tween from './tween';\n\nexport {\n  controller,\n  fromDrag,\n  fromEvent,\n  fromMouseMove,\n  fromMouseUp,\n  autoplay,\n  clip,\n  repeat,\n  spring,\n  stagger,\n  timeline,\n  track,\n  throttleRAF,\n  tween\n}\n\n// misc\nexport * from './easings';\n","import { map, pipe, listen } from \"agos\";\nimport fromEvent from \"../galaw/fromEvent\";\n\nconst noop = () => { };\n\nexport const createSpringSettings = container => {\n  const fields = container.getElementsByClassName('spring-setting')[0].getElementsByClassName('field');\n  const inputs = [...fields].map(field => field.getElementsByTagName('input'));\n\n  const settings = {};\n  inputs.forEach((input, index) => {\n    fields[index].firstElementChild.firstElementChild.innerHTML = input[0].value;;\n    settings[input[0].name] = input[0].value;\n    pipe(\n      fromEvent(input[0], 'change'),\n      map(e => [e.target.name, e.target.value]),\n      subscribe(([name, value]) => {\n        settings[name] = value;\n        fields[index].firstElementChild.firstElementChild.innerHTML = value;\n      })\n    )\n  });\n\n  return () => settings;\n};\n\n\n// agos specific\n\nexport const subscribe = (sink, external) => {\n  if (typeof sink === \"function\") return listen(noop, sink, noop, noop, external);\n  return listen(sink.open, sink.next, sink.fail, sink.done, external);\n}\n\nexport const mapTo = value => map(() => value);","import { pipe, map, } from \"agos\";\nimport {\n  stagger,\n  clip,\n  easeInQuad,\n  tween,\n  controller,\n  fromEvent,\n  easeInOutQuad,\n  repeat,\n} from \"../galaw\";\nimport { subscribe } from \"./utils\";\n\nconst container = document.getElementById(\"demo-3\");\nconst page = container.getElementsByClassName('page')[0];\nconst playground = container.getElementsByClassName(\"playground\")[0];\n\nconst rotateRange = page.getElementsByClassName('control')[0].getElementsByTagName('input')[0];\nconst rotateLabel = page.getElementsByClassName('control')[0].querySelector('label span');\n\nconst rectCount = 51;\nconst rects = [];\nfor (let index = 0; index < rectCount; index++) {\n  const rect = document.createElement(\"div\");\n  rect.classList.add(\"rect\");\n  rects.push(rect);\n  playground.appendChild(rect);\n}\n\nlet rotate = 45\nconst distribute = (l, h, c, i) => ((h - l) / c) * i + l;\npipe(\n  stagger(\n    (i, count) =>\n      pipe(\n        repeat(clip(400), Infinity),\n        map((data) => data.alternate),\n        map(easeInOutQuad),\n        tween((p) => [\n          p(0, distribute(rotate * -1, rotate, count, i)),\n          p(1, distribute(1, 2, count, i)),\n        ])\n      ),\n    {\n      count: rectCount,\n      delay: (i) => {\n        const delay = easeInQuad(Math.abs(i - 25) / 25) * 100;\n        return delay;\n      },\n    }\n  ),\n  subscribe(\n    (data) => {\n      const [[rotation, scale], index] = data;\n      const rect = rects[index];\n      rect.style.transform = `rotate(${rotation}deg) scale(${scale})`;\n    },\n    controller({\n      play: fromEvent(page, \"mouseenter\"),\n      pause: fromEvent(page, \"mouseleave\"),\n    })\n  )\n);\n\npipe(\n  fromEvent(rotateRange, 'input'),\n  subscribe(e => {\n    rotate = +e.target.value;\n    rotateLabel.innerText = rotate;\n  })\n)"]}