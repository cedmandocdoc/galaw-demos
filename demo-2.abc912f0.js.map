{"version":3,"sources":["../node_modules/agos/dist/agos.umd.js","galaw/tween.js","galaw/utils.js","galaw/engine.js","galaw/clock.js","galaw/spring.js","galaw/autoplay.js","galaw/fromEvent.js","galaw/throttleRAF.js","galaw/fromMouseMove.js","demos/demo-2.js"],"names":["tween","callback","progress","from","to","noop","prop","key","object","clipTime","start","end","next","status","time","forward","currentTime","CLOCK_MODE","Symbol","EMITTER_MODE","Engine","queue","running","tasks","Map","task","set","step","id","delete","window","requestAnimationFrame","forEach","size","clock","PLAY","PAUSE","REVERSE","JUMP","open","fail","done","talkback","offset","current","play","engine","add","pause","listen","type","payload","CANCEL","spring","computeMotion","settings","mass","stiffness","damping","initialDisplacement","initialVelocity","precision","t","b","m","k","x0","x1","velocity","displacement","z","Math","sqrt","w","abs","pow","B","A","exp","cos","sin","r","r1","r2","computeDuration","log","interceptor","NextInterceptor","_next","control","autoplay","source","value","fromEvent","target","name","options","addEventListener","removeEventListener","throttleRAF","release","fromMouseMove","el","container","document","getElementById","playground","getElementsByClassName","square","bouncy","data","center","x","clientWidth","y","clientHeight","lastCenterRatio","e","layerX","layerY","centerRatio","lastCenterRatioX","lastCenterRatioY","p","xr","yr","transform","style","Object","assign"],"mappings":"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","file":"demo-2.abc912f0.js","sourceRoot":"../src","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.agos = {}));\n}(this, (function (exports) { 'use strict';\n\n  class Map {\n    constructor(source, project) {\n      this.source = source;\n      this.project = project;\n    }\n\n    static join(source, project) {\n      return source instanceof Map\n        ? new Map(source.source, value => project(source.project(value)))\n        : new Map(source, project);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.source.listen(\n        open,\n        value => next(this.project(value)),\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const map = project => source => Map.join(source, project);\n\n  const tap = project =>\n    map(value => {\n      project(value);\n      return value;\n    });\n\n  class Filter {\n    constructor(source, predicate) {\n      this.source = source;\n      this.predicate = predicate;\n    }\n\n    static join(source, predicate) {\n      return source instanceof Filter\n        ? new Filter(\n            source.source,\n            value => source.predicate(value) && predicate(value)\n          )\n        : new Filter(source, predicate);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.source.listen(\n        open,\n        value => this.predicate(value) && next(value),\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const filter = predicate => source => Filter.join(source, predicate);\n\n  const CANCEL = Symbol(\"cancel\");\n\n  const noop = () => {};\n\n  const pipe = (...cbs) => {\n    let res = cbs[0];\n    for (let i = 1, n = cbs.length; i < n; i++) res = cbs[i](res);\n    return res;\n  };\n\n  class NextInterceptor {\n    constructor(source) {\n      this.source = source;\n      this.next = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.next = value => next(value);\n      this.source.listen(open, next, fail, done, talkback);\n    }\n  }\n\n  class CancelInterceptor {\n    constructor(source) {\n      this.source = new NextInterceptor(source);\n      this.run = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      this.run = () => this.source.next([CANCEL]);\n      this.source.listen(open, next, fail, done, talkback);\n    }\n  }\n\n  class TalkbackCancelInterceptor {\n    constructor(source) {\n      this.source = source;\n      this.run = noop;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new CancelInterceptor(talkback);\n      this.run = () => cancel.run();\n      this.source.listen(open, next, fail, done, cancel);\n    }\n  }\n\n  const IDLE = 0;\n  const ACTIVE = 1;\n  const DONE = 2;\n\n  class Source {\n    constructor(producer) {\n      this.producer = producer;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new TalkbackCancelInterceptor(talkback);\n      let state = IDLE;\n      this.producer(\n        () => {\n          if (state === IDLE) {\n            state = ACTIVE;\n            open();\n          }\n        },\n        value => {\n          if (state === ACTIVE) {\n            try {\n              next(value);\n            } catch (error) {\n              fail(error);\n            }\n          }\n        },\n        error => {\n          if (state === ACTIVE) fail(error);\n        },\n        cancelled => {\n          if (state === ACTIVE) {\n            cancel.run();\n            done(cancelled);\n            state = DONE;\n          }\n        },\n        filter(() => state === ACTIVE)(cancel)\n      );\n    }\n  }\n\n  const create = producer => new Source(producer);\n\n  const never = () => create(noop);\n\n  class Chain {\n    constructor(source, projects) {\n      this.source = source;\n      this.projects = projects;\n    }\n\n    static join(source, projects) {\n      return source instanceof Chain\n        ? new Chain(source.source, [...source.projects, ...projects])\n        : new Chain(source, projects);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancels = [];\n      let cancelled = false;\n      let active = 0;\n\n      const run = index => value => {\n        const project = this.projects[index];\n        const source = project(value);\n        const cancel = new CancelInterceptor(never());\n        cancels.push(cancel);\n\n        source.listen(\n          () => active++,\n          index >= this.projects.length - 1 ? next : run(index + 1),\n          fail,\n          () => --active <= 0 && done(cancelled),\n          cancel\n        );\n      };\n\n      this.source.listen(\n        open,\n        this.projects.length === 0 ? next : run(0),\n        fail,\n        () => active <= 0 && done(cancelled),\n        tap(payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n          }\n        })(talkback)\n      );\n    }\n  }\n\n  const chain = (...projects) => source => Chain.join(source, projects);\n\n  const IDLE$1 = 0;\n  const ACTIVE$1 = 1;\n  const DONE$1 = 2;\n\n  const emitter = () => {\n    let state = IDLE$1;\n    const opens = new Set();\n    const nexts = new Set();\n    const fails = new Set();\n    const dones = new Set();\n\n    const open = () => {\n      if (state === IDLE$1) {\n        state = ACTIVE$1;\n        for (const open of opens.values()) open();\n        opens.clear();\n      }\n    };\n\n    const next = value => {\n      if (state === ACTIVE$1) for (const next of nexts.values()) next(value);\n    };\n\n    const fail = error => {\n      if (state === ACTIVE$1) for (const fail of fails.values()) fail(error);\n    };\n\n    const done = cancelled => {\n      if (state === ACTIVE$1) {\n        state = DONE$1;\n        for (const done of dones.values()) done(cancelled);\n        nexts.clear();\n        fails.clear();\n        dones.clear();\n      }\n    };\n\n    const source = create((open, next, fail, done, talkback) => {\n      if (state === IDLE$1) opens.add(open);\n      else if (state === ACTIVE$1) open();\n\n      nexts.add(next);\n      fails.add(fail);\n      dones.add(done);\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            nexts.delete(next);\n            fails.delete(fail);\n            dones.delete(done);\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n    });\n\n    return [\n      {\n        open,\n        next,\n        fail,\n        done\n      },\n      source\n    ];\n  };\n\n  class Collect {\n    constructor(source, pipes) {\n      this.source = source;\n      this.pipes = pipes;\n    }\n\n    listen(open, next, fail, done, talkback) {\n      // TO DO investigate if emitter\n      // is appropriate to use in collection\n      const [controller, subject] = emitter();\n      const cancel = new CancelInterceptor(talkback);\n      let cancelled = 0;\n      let active = false;\n      for (let index = 0; index < this.pipes.length; index++) {\n        const pipe = this.pipes[index](subject);\n        pipe.listen(\n          noop,\n          value => next([value, index]),\n          error => fail([error, index]),\n          () => {\n            if (active && ++cancelled >= this.pipes.length) cancel.run();\n          },\n          never()\n        );\n      }\n      this.source.listen(\n        () => {\n          active = true;\n          open();\n          controller.open();\n        },\n        controller.next,\n        controller.fail,\n        cancelled => {\n          active = false;\n          done(cancelled);\n          controller.done(cancelled);\n        },\n        cancel\n      );\n    }\n  }\n\n  const collect = pipes => source => new Collect(source, pipes);\n\n  class Scan {\n    constructor(source, accumulator, seed) {\n      this.source = source;\n      this.accumulator = accumulator;\n      this.seed = seed;\n    }\n\n    static join(source, accumulator, seed) {\n      return new Scan(source, accumulator, seed);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      let seed = this.seed;\n      this.source.listen(\n        open,\n        value => {\n          seed = this.accumulator(seed, value);\n          next(seed);\n        },\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const scan = (accumulator, seed) => source =>\n    Scan.join(source, accumulator, seed);\n\n  const collectLatest = pipes => source =>\n    filter(values => values.length >= pipes.length)(\n      scan((values, [value, index]) => {\n        const newValues = [...values];\n        newValues[index] = value;\n        return newValues;\n      }, [])(collect(pipes)(source))\n    );\n\n  const concat = sources =>\n    create((open, next, fail, done, talkback) => {\n      const cancel = new CancelInterceptor(never());\n\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancel.run();\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n\n      const run = index => {\n        const source = sources[index];\n        source.listen(\n          index === 0 ? open : noop,\n          next,\n          fail,\n          () => {\n            if (index >= sources.length - 1) return done(false);\n            run(index + 1);\n          },\n          cancel\n        );\n      };\n\n      run(0);\n    });\n\n  const empty = () =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      done(false);\n    });\n\n  const fromArray = array =>\n    create((open, next, fail, done, talkback) => {\n      let cancelled = false;\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      open();\n      for (let index = 0; index < array.length; index++) {\n        if (cancelled) break;\n        next([array[index], index]);\n      }\n      done(false);\n    });\n\n  const fromObject = object =>\n    create((open, next, fail, done, talkback) => {\n      let cancelled = false;\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            cancelled = true;\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      open();\n      const keys = Object.keys(object);\n      for (let index = 0; index < keys.length; index++) {\n        if (cancelled) break;\n        const key = keys[index];\n        const value = object[key];\n        next([value, key]);\n      }\n      done(false);\n    });\n\n  const fromPromise = promise =>\n    create((open, next, fail, done, talkback) => {\n      open();\n      promise\n        .then(value => next(value))\n        .catch(error => fail(error))\n        .finally(() => done(false));\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n    });\n\n  const join = () => chain(source => source);\n\n  class Slice {\n    constructor(source, start = 0, end = Infinity) {\n      this.source = source;\n      this.start = start;\n      this.end = end;\n    }\n\n    static join(source, start = 0, end = Infinity) {\n      return source instanceof Slice\n        ? new Slice(\n            source.source,\n            start < 0 ? start : source.start + start,\n            end < source.end ? end : source.end\n          )\n        : new Slice(source, start, end);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      if (this.start < 0 || this.end < 0) {\n        // future sink\n        const values = [];\n\n        this.source.listen(\n          open,\n          value => values.push(value),\n          fail,\n          cancelled => {\n            const sliced = values.slice(this.start, this.end);\n            for (let index = 0; index < sliced.length; index++) {\n              next(sliced[index]);\n            }\n            done(cancelled);\n          },\n          talkback\n        );\n      } else {\n        // slice sink\n        let count = 0;\n        const cancel = new CancelInterceptor(talkback);\n\n        this.source.listen(\n          open,\n          value => {\n            count++;\n            count > this.start && next(value);\n            count >= this.end && cancel.run();\n          },\n          fail,\n          done,\n          cancel\n        );\n      }\n    }\n  }\n\n  const slice = (start, end) => source => Slice.join(source, start, end);\n\n  const last = () => slice(-1);\n\n  const listen = (\n    open = noop,\n    next = noop,\n    fail = noop,\n    done = noop,\n    talkback = never()\n  ) => source => source.listen(open, next, fail, done, talkback);\n\n  const merge = sources =>\n    create((open, next, fail, done, talkback) => {\n      const closed = [];\n      const cancels = [];\n      talkback.listen(\n        noop,\n        payload => {\n          if (payload[0] === CANCEL) {\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n            done(true);\n          }\n        },\n        noop,\n        noop,\n        never()\n      );\n      for (let index = 0; index < sources.length; index++) {\n        const source = sources[index];\n        const cancel = new CancelInterceptor(never());\n        cancels[index] = cancel;\n        source.listen(\n          open,\n          value => next([value, index]),\n          error => fail([error, index]),\n          () => {\n            closed[index] = true;\n            if (closed.length === sources.length) done(false);\n          },\n          cancel\n        );\n      }\n    });\n\n  const mergeLatest = sources =>\n    pipe(\n      merge(sources),\n      scan((values, [value, index]) => {\n        values[index] = value;\n        return values;\n      }, []),\n      filter(values => values.length >= sources.length)\n    );\n\n  const multicast = source => {\n    let active = false;\n    const [controller, subject] = emitter();\n\n    return create((open, next, fail, done, talkback) => {\n      subject.listen(open, next, fail, done, talkback);\n      if (!active) {\n        active = true;\n        source.listen(\n          controller.open,\n          controller.next,\n          controller.fail,\n          controller.done,\n          never()\n        );\n      }\n    });\n  };\n\n  const of = value =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      next(value);\n      done(false);\n    });\n\n  const fail = error =>\n    create((open, next, fail, done, talkback) => {\n      talkback.listen(\n        noop,\n        payload => payload[0] === CANCEL && done(true),\n        noop,\n        noop,\n        never()\n      );\n      open();\n      fail(error);\n      done(false);\n    });\n\n  const skip = amount => slice(amount);\n\n  const skipWhile = predicate => filter(value => !predicate(value));\n\n  class SwitchMap {\n    constructor(source, projects) {\n      this.source = source;\n      this.projects = projects;\n    }\n\n    static join(source, projects) {\n      return source instanceof SwitchMap\n        ? new SwitchMap(source.source, [...source.projects, ...projects])\n        : new SwitchMap(source, projects);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancels = [];\n      let cancelled = false;\n      let finished = false;\n      let active = 0;\n\n      const run = index => value => {\n        cancels[index] = cancels[index] || new CancelInterceptor(never());\n        const cancel = cancels[index];\n        cancel.run();\n        const project = this.projects[index];\n        const source = project(value);\n\n        source.listen(\n          () => active++,\n          index >= this.projects.length - 1 ? next : run(index + 1),\n          fail,\n          () => --active <= 0 && finished && done(cancelled),\n          cancel\n        );\n      };\n\n      this.source.listen(\n        open,\n        this.projects.length === 0 ? next : run(0),\n        fail,\n        cancel => {\n          finished = true;\n          cancelled = cancel;\n          if (active <= 0) done(cancelled);\n        },\n        tap(payload => {\n          if (payload[0] === CANCEL) {\n            for (let index = 0; index < cancels.length; index++) {\n              const cancel = cancels[index];\n              cancel.run();\n            }\n          }\n        })(talkback)\n      );\n    }\n  }\n\n  const switchMap = project => source => SwitchMap.join(source, [project]);\n\n  const take = amount => slice(0, amount);\n\n  class TakeWhile {\n    constructor(source, predicate) {\n      this.source = source;\n      this.predicate = predicate;\n    }\n\n    static join(source, predicate) {\n      return source instanceof TakeWhile\n        ? new TakeWhile(source.source, value => {\n            const [included, inclusive] = source.predicate(value);\n            if (!included) return [included, inclusive];\n            return predicate(value);\n          })\n        : new TakeWhile(source, predicate);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      const cancel = new CancelInterceptor(talkback);\n\n      this.source.listen(\n        open,\n        value => {\n          const [included, inclusive] = this.predicate(value);\n          if (!included) {\n            if (inclusive) next(value);\n            return cancel.run();\n          }\n          next(value);\n        },\n        fail,\n        done,\n        cancel\n      );\n    }\n  }\n\n  const takeWhile = (predicate, inclusive = false) => source =>\n    TakeWhile.join(source, value => [predicate(value), inclusive]);\n\n  class Throttle {\n    constructor(source, tick) {\n      this.source = source;\n      this.tick = tick;\n    }\n\n    static join(source, tick) {\n      return source instanceof Throttle\n        ? new Throttle(source.source, (release, data) =>\n            source.tick(() => tick(release, data), data)\n          )\n        : new Throttle(source, tick);\n    }\n\n    listen(open, next, fail, done, talkback) {\n      let active = false;\n      this.source.listen(\n        open,\n        value => {\n          if (active) return;\n          active = true;\n          this.tick(() => {\n            next(value);\n            active = false;\n          }, value);\n        },\n        fail,\n        done,\n        talkback\n      );\n    }\n  }\n\n  const throttle = tick => source => Throttle.join(source, tick);\n\n  exports.CANCEL = CANCEL;\n  exports.CancelInterceptor = CancelInterceptor;\n  exports.NextInterceptor = NextInterceptor;\n  exports.TalkbackCancelInterceptor = TalkbackCancelInterceptor;\n  exports.chain = chain;\n  exports.collect = collect;\n  exports.collectLatest = collectLatest;\n  exports.concat = concat;\n  exports.create = create;\n  exports.emitter = emitter;\n  exports.empty = empty;\n  exports.filter = filter;\n  exports.fromArray = fromArray;\n  exports.fromObject = fromObject;\n  exports.fromPromise = fromPromise;\n  exports.join = join;\n  exports.last = last;\n  exports.listen = listen;\n  exports.map = map;\n  exports.merge = merge;\n  exports.mergeLatest = mergeLatest;\n  exports.multicast = multicast;\n  exports.never = never;\n  exports.of = of;\n  exports.pipe = pipe;\n  exports.reject = fail;\n  exports.scan = scan;\n  exports.skip = skip;\n  exports.skipWhile = skipWhile;\n  exports.slice = slice;\n  exports.switchMap = switchMap;\n  exports.take = take;\n  exports.takeWhile = takeWhile;\n  exports.tap = tap;\n  exports.throttle = throttle;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import { map } from \"agos\";\n\nconst tween = callback =>\n  map(progress => callback((from, to) => (to - from) * progress + from));\n\nexport default tween;\n","export const noop = () => {};\n\nexport const prop = key => object => object[key];\n\nexport const clipTime = (start, end, next) => {\n  const status = [0, 0];\n  return ({ time, forward }) => {\n    if (time >= start && time <= end) {\n      const currentTime = time - start;\n      next({\n        time: currentTime,\n        forward,\n        progress: currentTime / (end - start)\n      });\n      status[0] = 0;\n      status[1] = 0;\n    } else if (time < start && !status[0] && !forward) {\n      next({ time: start, forward, progress: 0 });\n      status[0] = 1;\n      status[1] = 0;\n    } else if (time > end && !status[1] && forward) {\n      next({ time: end, forward, progress: 1 });\n      status[0] = 0;\n      status[1] = 1;\n    }\n  };\n};\n\nexport const CLOCK_MODE = Symbol(\"CLOCK_MODE\");\nexport const EMITTER_MODE = Symbol(\"EMITTER_MODE\");\n","class Engine {\n  constructor() {\n    this.queue = 0;\n    this.running = false;\n    this.tasks = new Map();\n  }\n\n  add(task) {\n    this.tasks.set(this.queue, task);\n\n    if (!this.running) {\n      this.running = true;\n      this.step();\n    }\n\n    return this.queue++;\n  }\n\n  delete(id) {\n    this.tasks.delete(id);\n  }\n\n  step() {\n    window.requestAnimationFrame(time => {\n      this.tasks.forEach(task => task(time));\n      if (this.tasks.size) this.step();\n      else this.running = false;\n    });\n  }\n}\n\nexport default new Engine();\n","import { create, never, CANCEL } from \"agos\";\nimport { noop } from \"./utils\";\n\nimport engine from \"./engine\";\n\nexport const PLAY = Symbol(\"play\");\nexport const PAUSE = Symbol(\"pause\");\nexport const REVERSE = Symbol(\"reverse\");\nexport const JUMP = Symbol(\"jump\");\n\nconst clock = create((open, next, fail, done, talkback) => {\n  let id = 0;\n  let start = 0;\n  let offset = 0;\n  let current = 0;\n  let forward = true;\n\n  const play = () => {\n    if (id) return;\n    start = 0;\n    id = engine.add(time => {\n      start = start || time;\n      current = forward ? time - start + offset : offset - (time - start);\n      next({ time: current, forward });\n    });\n  };\n\n  const pause = () => {\n    if (!id) return;\n    engine.delete(id);\n    id = 0;\n    start = 0;\n    offset = current;\n  };\n\n  const reverse = () => {\n    start = 0;\n    offset = current;\n    forward = !forward;\n    play();\n  };\n\n  const jump = time => {\n    start = 0;\n    current = time;\n    offset = time;\n    if (!id) {\n      id = engine.add(time => {\n        start = start || time;\n        current = forward ? time - start + offset : offset - (time - start);\n        next({ time: current, forward });\n        engine.delete(id);\n        id = 0;\n      });\n    }\n  };\n\n  const cancel = () => {\n    pause();\n    done(true);\n  };\n\n  open();\n  play();\n\n  talkback.listen(\n    noop,\n    ([type, payload]) => {\n      if (type === PLAY) play();\n      else if (type === PAUSE) pause();\n      else if (type === REVERSE) reverse();\n      else if (type === JUMP) jump(payload);\n      else if (type === CANCEL) cancel();\n    },\n    noop,\n    noop,\n    never()\n  );\n});\n\nexport default clock;\n","import { NextInterceptor, CANCEL, create, never, emitter } from \"agos\";\nimport { EMITTER_MODE, CLOCK_MODE, noop } from \"./utils\";\nimport clock from \"./clock\";\n\nconst computeMotion = (settings, time) => {\n  const {\n    mass,\n    stiffness,\n    damping,\n    initialDisplacement,\n    initialVelocity,\n    precision = 0.01\n  } = settings;\n\n  const t = time / 1000;\n  const b = damping;\n  const m = mass;\n  const k = stiffness;\n  const x0 = initialDisplacement;\n  const x1 = initialVelocity;\n\n  let velocity = 0;\n  let displacement = 0;\n\n  const z = b / Math.sqrt(4 * k * m);\n  if (z < 1) {\n    // underdamped\n    const w = Math.sqrt(Math.abs(Math.pow(b / m, 2) - (4 * k) / m));\n    const B = -(x1 + (x0 * b) / (2 * m)) / w;\n    const A = x0;\n    displacement =\n      Math.exp((-b * t) / (2 * m)) *\n      (A * Math.cos(w * t) + B * Math.sin(w * t));\n    velocity =\n      (A * Math.cos(w * t) + B * Math.sin(w * t)) *\n      (-1 * (b / (2 * m))) *\n      Math.exp((-1 * b * t) / (2 * m)) +\n      (A * w * Math.sin(w * t) + B * w * Math.cos(w * t)) *\n      Math.exp((-1 * b * t) / (2 * m));\n  } else if (z === 1) {\n    // critically damped\n    const r = -(b / (2 * m));\n    const B = x1 - x0 * r;\n    const A = x0;\n    displacement = A * Math.exp(r * t) + B * t * Math.exp(r * t);\n    velocity =\n      A * r * Math.exp(r * t) + B * (Math.exp(r * t) + t * Math.exp(r * t));\n  } else if (z > 1) {\n    // overdamped\n    const w = Math.sqrt(Math.abs(Math.pow(b / m, 2) - (4 * k) / m));\n    const r1 = 0.5 * (-b / m + w);\n    const r2 = 0.5 * (-b / m - w);\n    const B = (x1 - r1 * x0) / (r2 - r1);\n    const A = x0 - B;\n    displacement = A * Math.exp(r1 * t) + B * Math.exp(r2 * t);\n    velocity = A * r1 * Math.exp(r1 * t) + B * r2 * Math.exp(r2 * t);\n  }\n\n  if (Math.abs(velocity) <= precision || Math.abs(displacement) <= precision) {\n    displacement = 0;\n    velocity = 0;\n  }\n\n  return {\n    displacement,\n    velocity\n  };\n};\n\nconst computeDuration = settings => {\n  const {\n    mass,\n    stiffness,\n    damping,\n    initialDisplacement,\n    precision = 0.5\n  } = settings;\n\n  const b = damping;\n  const m = mass;\n  const k = stiffness;\n  const x0 = initialDisplacement;\n\n  const z = b / Math.sqrt(4 * k * m);\n\n  if (z < 1) {\n    return ((-2 * m * Math.log(precision / x0)) / b) * 1000;\n  }\n\n  let time = 0;\n  while (true) {\n    time += 100 / 6;\n    const { displacement, velocity } = computeMotion(settings, time);\n    if (displacement === 0 && velocity === 0) break;\n  }\n  return time;\n};\n\n// TO DO: spring\n// should propagate done on finish?\n// should depend on motion when to propagate or stop?\nconst spring = settings =>\n  create((open, next, fail, done, talkback) => {\n    const interceptor = new NextInterceptor(never());\n    const status = [0, 0];\n    open();\n\n    const _next = ({ time, forward }) => {\n      const { displacement, velocity } = computeMotion(settings, time);\n      if (time >= 0 && displacement !== 0 && velocity !== 0) {\n        status[0] = 0;\n        status[1] = 0;\n        const progress =\n          Math.abs(\n            (time < 0 ? settings.initialDisplacement : displacement) -\n            settings.initialDisplacement\n          ) / settings.initialDisplacement;\n        next({ time, forward, displacement, velocity, progress });\n      } else if (!forward && !status[0] && time < 0) {\n        status[0] = 1;\n        status[1] = 0;\n        next({ time, forward, displacement, velocity, progress: 0 });\n      } else if (\n        forward &&\n        !status[1] &&\n        displacement === 0 &&\n        velocity === 0\n      ) {\n        status[0] = 0;\n        status[1] = 1;\n        next({ time, forward, displacement, velocity, progress: 1 });\n      }\n    };\n    talkback.listen(\n      noop,\n      ([type, payload]) => {\n        if (type === CLOCK_MODE) {\n          interceptor.next([CANCEL]);\n          clock.listen(open, _next, fail, done, interceptor);\n          return;\n        }\n        if (type === EMITTER_MODE) {\n          interceptor.next([CANCEL]);\n          const [control, source] = emitter();\n          source.listen(open, _next, fail, done, interceptor);\n          payload(computeDuration(settings), control);\n          return;\n        }\n        interceptor.next([type, payload]);\n      },\n      noop,\n      noop,\n      never()\n    );\n  });\n\nexport default spring;\n","import { pipe, create, merge, of, map, tap } from \"agos\";\nimport { CLOCK_MODE } from \"./utils\";\nimport { PLAY } from \"./clock\";\n\nconst autoplay = source =>\n  create((open, next, fail, done, talkback) => {\n    source.listen(\n      open,\n      next,\n      fail,\n      done,\n      pipe(\n        merge([of([CLOCK_MODE]), of([PLAY]), talkback]),\n        map(([value]) => value)\n      )\n    );\n  });\n\nexport default autoplay;","import { create, CANCEL, never } from \"agos\";\nimport { noop } from \"./utils\";\n\nconst fromEvent = (target, name, options) =>\n  create((open, next, fail, done, talkback) => {\n    open();\n    target.addEventListener(name, next, options);\n    talkback.listen(\n      noop,\n      payload => {\n        if (payload[0] === CANCEL) {\n          target.removeEventListener(name, next);\n          done(true);\n        }\n      },\n      noop,\n      noop,\n      never()\n    );\n  });\n\nexport default fromEvent;\n","import { throttle } from \"agos\";\nimport engine from \"./engine\";\n\nconst throttleRAF = throttle(release => {\n  const id = engine.add(() => {\n    release();\n    engine.delete(id);\n  });\n});\n\nexport default throttleRAF;\n","import { pipe, map } from \"agos\";\nimport fromEvent from \"./fromEvent\";\nimport throttleRAF from \"./throttleRAF\";\n\nconst fromMouseMove = el =>\n  pipe(\n    fromEvent(el, \"mousemove\"),\n    throttleRAF,\n    // to do what should respect here layer screen or change\n    // the settings for initial reference\n    // map(e => ({ x: e.layerX - x, y: e.layerY - y }))\n  );\n\nexport default fromMouseMove;","import { listen, map, pipe, switchMap, collectLatest, tap } from \"agos\";\nimport tween from \"../galaw/tween\";\nimport spring from \"../galaw/spring\";\nimport autoplay from \"../galaw/autoplay\";\nimport fromMouseMove from \"../galaw/fromMouseMove\";\nimport { noop } from \"../galaw/utils\";\n\nconst container = document.getElementById('demo-2');\nconst playground = container.getElementsByClassName('playground')[0]\nconst square = playground.getElementsByClassName('big-square')[0];\n\nconst bouncy = (displacement = 100) =>\n  pipe(\n    spring({\n      mass: 50,\n      stiffness: 3000,\n      damping: 350,\n      initialDisplacement: displacement,\n      initialVelocity: 0\n    }),\n    map(data => Math.abs(data.displacement - displacement) / displacement)\n  );\n\n\nconst center = { x: playground.clientWidth / 2, y: playground.clientHeight / 2 };\nconst lastCenterRatio = { x: 0, y: 0 };\n\npipe(\n  fromMouseMove(playground),\n  map(e => ({ x: e.layerX - center.x, y: e.layerY - center.y })),\n  switchMap(({ x, y }) => {\n    const centerRatio = { x: (x / center.x), y: (y / center.y) };\n\n    const lastCenterRatioX = lastCenterRatio.x;\n    const lastCenterRatioY = lastCenterRatio.y;\n    return autoplay(\n      pipe(\n        bouncy(),\n        collectLatest([\n          tween(p => p(lastCenterRatioX, centerRatio.x)),\n          tween(p => p(lastCenterRatioY, centerRatio.y)),\n        ]),\n        tap(([xr, yr]) => {\n          lastCenterRatio.x = xr;\n          lastCenterRatio.y = yr;\n        })\n      )\n    );\n  }),\n  map(([xr, yr]) => ({ transform: `perspective(600px) translate(${xr * 20}px, ${yr * 20}px)  rotateX(${-(yr * 20)}deg) rotateY(${xr * 20}deg) scale(${(.4 * Math.abs(xr)) + 1})` })),\n  listen(\n    noop,\n    style => Object.assign(square.style, style)\n  )\n)\n"]}